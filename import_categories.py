import pandas as pd
import sqlite3
import os

def import_categories_to_db():
    """
    Importe les donn√©es de tickets_categorie_final.csv dans la base de donn√©es
    """
    # Chemin vers le fichier CSV
    csv_path = "data/tickets_categorie_final.csv"
    db_path = "base.db"
    
    # V√©rifier que le fichier CSV existe
    if not os.path.exists(csv_path):
        print(f"‚ùå Fichier {csv_path} non trouv√©")
        return
    
    # Lire le fichier CSV
    print(f"üìñ Lecture du fichier {csv_path}...")
    df = pd.read_csv(csv_path, sep=';')
    print(f"‚úÖ {len(df)} lignes lues")
    
    # Afficher les premi√®res lignes
    print("\nüìã Aper√ßu des donn√©es :")
    print(df.head())
    
    # Connexion √† la base de donn√©es
    conn = sqlite3.connect(db_path)
    cursor = conn.cursor()
    
    # Cr√©er une nouvelle table pour les cat√©gories de produits
    print("\nüóÑÔ∏è Cr√©ation de la table Categories_Produits...")
    cursor.execute("""
        CREATE TABLE IF NOT EXISTS Categories_Produits (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            libelle TEXT NOT NULL,
            categorie TEXT NOT NULL,
            created_at TIMESTAMP DEFAULT CURRENT_TIMESTAMP
        )
    """)
    
    # Vider la table si elle existe d√©j√† (optionnel)
    cursor.execute("DELETE FROM Categories_Produits")
    
    # Pr√©parer les donn√©es pour l'insertion
    data_to_insert = []
    for _, row in df.iterrows():
        produit = row['Produit'].strip()
        categorie = row['Categories_OFF'].strip()
        if produit and categorie:  # V√©rifier que les donn√©es ne sont pas vides
            data_to_insert.append((produit, categorie))
    
    # Ins√©rer les donn√©es
    print(f"\nüíæ Insertion de {len(data_to_insert)} produits dans la base...")
    cursor.executemany(
        "INSERT INTO Categories_Produits (libelle, categorie) VALUES (?, ?)",
        data_to_insert
    )
    
    # Valider les changements
    conn.commit()
    
    # V√©rifier l'insertion
    cursor.execute("SELECT COUNT(*) FROM Categories_Produits")
    count = cursor.fetchone()[0]
    print(f"‚úÖ {count} produits ins√©r√©s avec succ√®s")
    
    # Afficher quelques exemples
    print("\nüìä Exemples de produits ins√©r√©s :")
    cursor.execute("SELECT libelle, categorie FROM Categories_Produits LIMIT 5")
    examples = cursor.fetchall()
    for produit, categorie in examples:
        print(f"  - {produit} ‚Üí {categorie}")
    
    # Afficher les statistiques par cat√©gorie
    print("\nüìà Statistiques par cat√©gorie :")
    cursor.execute("""
        SELECT categorie, COUNT(*) as count 
        FROM Categories_Produits 
        GROUP BY categorie 
        ORDER BY count DESC
    """)
    stats = cursor.fetchall()
    for categorie, count in stats:
        print(f"  - {categorie}: {count} produits")
    
    # Fermer la connexion
    conn.close()
    print(f"\nüéâ Import termin√© avec succ√®s !")

if __name__ == "__main__":
    import_categories_to_db() 